# MAKEFILE –¥–ª—è Ultra Code Manager Enhanced
# –ö–æ–º–ø–∏–ª—è—Ü–∏—è C++ assembler –ø—Ä–æ–≥—Ä–∞–º–º—ã —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏

CXX = g++
TARGET = file_assembler.exe
SOURCE = file_assembler.cpp

# –§–ª–∞–≥–∏ –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–∞ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
CXXFLAGS = -std=c++17 -O3 -march=native -mtune=native -flto \
           -ffast-math -funroll-loops -finline-functions \
           -mavx2 -mfma -DNDEBUG

# –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏
LIBS = -static-libgcc -static-libstdc++

# –í–∫–ª—é—á–µ–Ω–∏–µ nlohmann/json (header-only –±–∏–±–ª–∏–æ—Ç–µ–∫–∞)
INCLUDES = -I./json/include

# Windows-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ñ–ª–∞–≥–∏
ifeq ($(OS),Windows_NT)
    CXXFLAGS += -D_WIN32_WINNT=0x0601
    LIBS += -lws2_32
endif

.PHONY: all clean install setup test benchmark

all: setup $(TARGET)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å –∫–æ–º–ø–∏–ª—è—Ü–∏–∏
$(TARGET): $(SOURCE)
	@echo "üî® –ö–æ–º–ø–∏–ª—è—Ü–∏—è assembler –ø—Ä–æ–≥—Ä–∞–º–º—ã —Å AVX2 –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏..."
	$(CXX) $(CXXFLAGS) $(INCLUDES) -o $(TARGET) $(SOURCE) $(LIBS)
	@echo "‚úÖ Assembler –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–∞: $(TARGET)"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
setup:
	@echo "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Ultra Code Manager Enhanced..."
	@if not exist json mkdir json
	@if not exist json\include mkdir json\include
	@if not exist json\include\nlohmann mkdir json\include\nlohmann
	@if not exist json\include\nlohmann\json.hpp (echo üì• –ó–∞–≥—Ä—É–∑–∫–∞ nlohmann/json... && curl -L https://github.com/nlohmann/json/releases/latest/download/json.hpp -o json\include\nlohmann\json.hpp)
	@if not exist embeddings mkdir embeddings
	@echo "‚úÖ –û–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ"

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
install: setup
	@echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
	pip install -r requirements.txt
	@echo "‚úÖ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ assembler –ø—Ä–æ–≥—Ä–∞–º–º—ã
test: $(TARGET)
	@echo "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ assembler –ø—Ä–æ–≥—Ä–∞–º–º—ã..."
	@echo {"filepath":"test.txt"} > test_params.json
	@echo "Test content for assembler" > test.txt
	@$(TARGET) read "{\"filepath\":\"test.txt\"}"
	@del test.txt test_params.json
	@echo "‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"

# –ë–µ–Ω—á–º–∞—Ä–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
benchmark: $(TARGET)
	@echo "‚ö° –ó–∞–ø—É—Å–∫ –±–µ–Ω—á–º–∞—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏..."
	@python benchmark_assembler.py
	@echo "‚úÖ –ë–µ–Ω—á–º–∞—Ä–∫ –∑–∞–≤–µ—Ä—à–µ–Ω"

# –û—á–∏—Å—Ç–∫–∞
clean:
	@echo "üßπ –û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤..."
	@if exist $(TARGET) del $(TARGET)
	@if exist *.o del *.o
	@if exist *.tmp del *.tmp
	@if exist *.backup.* del *.backup.*
	@echo "‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"

# –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤–∫–ª—é—á–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
distclean: clean
	@echo "üóëÔ∏è –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞..."
	@if exist json rmdir /s /q json
	@if exist embeddings rmdir /s /q embeddings
	@if exist __pycache__ rmdir /s /q __pycache__
	@echo "‚úÖ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"

# –°–ø—Ä–∞–≤–∫–∞
help:
	@echo "üöÄ Ultra Code Manager Enhanced - Makefile"
	@echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
	@echo "  make all       - –ü–æ–ª–Ω–∞—è —Å–±–æ—Ä–∫–∞ (setup + compile)"
	@echo "  make setup     - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è"
	@echo "  make install   - –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"
	@echo "  make test      - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ assembler –ø—Ä–æ–≥—Ä–∞–º–º—ã"
	@echo "  make benchmark - –ë–µ–Ω—á–º–∞—Ä–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
	@echo "  make clean     - –û—á–∏—Å—Ç–∫–∞ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"
	@echo "  make distclean - –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞"
	@echo "  make help      - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞" 